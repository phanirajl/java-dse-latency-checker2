{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fswiss\fcharset0 ArialMT;
\f3\fnil\fcharset0 Menlo-Italic;\f4\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red26\green26\blue26;
\red255\green255\blue255;\red109\green109\blue109;\red0\green0\blue109;\red15\green112\blue3;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c100000;\cssrgb\c13333\c13333\c13333;
\cssrgb\c100000\c100000\c100000;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c0\c0\c42745;\csgenericrgb\c5882\c43922\c1176;}
\margl1440\margr1440\vieww12600\viewh10200\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 DEVELOPER GUIDE:\
\

\b Use Cases
\b0  (see User_Document.rtf)\
\

\b Design:
\b0 \
\
Two Classes: LatencyChecker2, ExecutorWrapper\
Property File: Single application.properties file included\
\
We create a uber jar that bundles all the dependent jars (and default application.properties)\
\
We should override the property file as such (using Maven shade plugin):\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 \CocoaLigature0 java -cp uber-java-dse-latency-checker2-1.0-SNAPSHOT.jar -DPROP_FILE=/Users/subratadasgupta/GitHub/java-dse-latency-checker2/app2.properties com.datastax.dse.demo.ExecutorsWrapper
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\ul Timing calculation assumptions:\ulnone \
\
I consider the following:\
\
\pard\pardeftab720\sl300\partightenfactor0

\f2\fs25\fsmilli12800 \cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Using multiple threads in parallel, each thread doing a insert in dc1 and same thread reading from dc2.\
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \cb5 Additional Delay = Total_Latency - (Read_Latency+Write_Latency)\
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\b \cf4 \cb5 \ul \ulc4 Definitions:
\b0 \ulnone \
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\i \cf4 \cb5 Total_Latency:
\i0 \'a0Time between when a data record is being inserted to time when it is read into client program.\
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\i \cf4 \cb5 Read_Latency
\i0 : Time spent in executing select statement until data is read into client program.\
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\i \cf4 \cb5 Write_Latency
\i0 : Time spent in executing insert statement until data is acknowledged as written by coordinator.\
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\i \cf4 \cb5 Additional_Delay
\i0 : Difference in time as explained above.\'a0\
\
\pard\pardeftab720\sl300\partightenfactor0

\b \cf4 \ul \ulc4 Sample output (Local laptop):
\b0 \ulnone \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 sdasgupta-MBP15:target subratadasgupta$ java -cp uber-java-dse-latency-checker2-1.0-SNAPSHOT.jar -DPROP_FILE=/Users/subratadasgupta/GitHub/java-dse-latency-checker2/app2.properties com.datastax.dse.demo.ExecutorsWrapper\
Starting ExecutorsWrapper..\
Creating Executor Service with a thread pool of Size 2\
Property File Specified: /Users/subratadasgupta/GitHub/java-dse-latency-checker2/app2.properties\
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".\
SLF4J: Defaulting to no-operation (NOP) logger implementation\
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\
Connected to cluster: BootCamp-18-Cluster\
Connected to cluster: BootCamp-18-Cluster\
Submitting the tasks for execution...\
Average Write latency (msec): 3.985591\
Average Read latency (msec): 0.976041\
Average Total latency (msec): 5.072411\
Average Write latency (msec): 4.284083\
Average Read latency (msec): 0.809199\
Average Total latency (msec): 5.162033\
Average Write latency (msec): 1.59694\
Average Read latency (msec): 1.543811\
Average Total latency (msec): 3.246649\
Average Write latency (msec): 1.779936\
Average Read latency (msec): 1.506274\
Average Total latency (msec): 3.394025\
Shutdown...
\f2\fs25\fsmilli12800 \cf4 \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \
\
\pard\pardeftab720\sl300\partightenfactor0

\b \cf4 \ul \ulc4 Sample output (AWS):
\b0 \ulnone \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 sdasgupta-MBP15:target subratadasgupta$ java -cp uber-java-dse-latency-checker2-1.0-SNAPSHOT.jar com.datastax.dse.demo.ExecutorsWrapper\
Starting ExecutorsWrapper..\
Creating Executor Service with a thread pool of Size 2\
Property File Specified: null\
Trying to use default bundled property file...\
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".\
SLF4J: Defaulting to no-operation (NOP) logger implementation\
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\
Connected to cluster: vinod-training\
Connected to cluster: vinod-training\
Submitting the tasks for execution...\
Average Write latency (msec): 28.63253\
Average Read latency (msec): 87.256673\
Average Total latency (msec): 116.023145\
Average Write latency (msec): 32.547365\
Average Read latency (msec): 85.945417\
Average Total latency (msec): 118.617666\
Average Write latency (msec): 36.512067\
Average Read latency (msec): 86.823801\
Average Total latency (msec): 123.420302\
Average Write latency (msec): 27.343096\
Average Read latency (msec): 101.296341\
Average Total latency (msec): 128.759076\
Shutdown...\
\pard\pardeftab720\sl300\partightenfactor0

\f2\fs25\fsmilli12800 \cf4 \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl300\partightenfactor0

\b \cf4 \ul \ulc4 Sample Property file:
\b0 \ulnone \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f3\i\fs24 \cf6 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 # List of comma-separated IP addresses of hosts in each DC\
#CONTACT_POINTS_DC1 = 127.0.0.1,localhost\
#CONTACT_POINTS_DC2 = 127.0.0.1\
# DC #1 configs (laptop testing)\
#dc1_name = Red\
# DC #2 configs (laptop testing)\
#dc2_name = Red\
\
# US West (AWS)\

\f4\i0\b \cf7 CONTACT_POINTS_DC1 
\f1\b0 \cf0 = 
\f4\b \cf8 13.57.248.149,13.57.30.120\

\f3\i\b0 \cf6 #US East (AWS)\

\f4\i0\b \cf7 CONTACT_POINTS_DC2 
\f1\b0 \cf0 = 
\f4\b \cf8 54.210.34.153,54.85.173.63\
\
\cf7 dc1_name 
\f1\b0 \cf0 = 
\f4\b \cf8 us-westdc2\
\cf7 dc2_name 
\f1\b0 \cf0 = 
\f4\b \cf8 us-eastdc1\
\
\cf7 PORT 
\f1\b0 \cf0 = 
\f4\b \cf8 9042\
\

\f3\i\b0 \cf6 # Number of records to write (and then read). This number should be left at 1.\
# Left for future testing if we want to combine sequential writes/reads with parallel batches\

\f4\i0\b \cf7 numRecords 
\f1\b0 \cf0 = 
\f4\b \cf8 1\
\

\f3\i\b0 \cf6 # Keyspace definiton (The schema should use NetworkTopologyStrategy and RF=3 for Production testing)\
# For Laptop\
#keyspace = CREATE KEYSPACE IF NOT EXISTS latency_check WITH replication = \{'class':'SimpleStrategy', 'replication_factor':1\};\
# For a Cluster (Eg: AWS)\

\f4\i0\b \cf7 keyspace 
\f1\b0 \cf0 = 
\f4\b \cf8 CREATE KEYSPACE IF NOT EXISTS latency_check WITH replication = \{'class':'NetworkTopologyStrategy', 'us-eastdc1':3, 'us-westdc2':3\};\
\
\

\f3\i\b0 \cf6 # Table DDL\

\f4\i0\b \cf7 createTable 
\f1\b0 \cf0 = 
\f4\b \cf8 CREATE TABLE IF NOT EXISTS latency_check.kvp (id uuid PRIMARY KEY,nanosec bigint);\
\

\f3\i\b0 \cf6 #Insert Statement\

\f4\i0\b \cf7 insertStatement 
\f1\b0 \cf0 = 
\f4\b \cf8 INSERT INTO latency_check.kvp (id, nanosec) VALUES (?, ?) USING TTL 3600\
\

\f3\i\b0 \cf6 #Select Statement\

\f4\i0\b \cf7 selectStatement 
\f1\b0 \cf0 = 
\f4\b \cf8 SELECT nanosec FROM latency_check.kvp where id=?\
\pard\pardeftab720\sl300\partightenfactor0

\f2\b0\fs25\fsmilli12800 \cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
-- END\'97}