{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fswiss\fcharset0 ArialMT;
\f3\fnil\fcharset0 Menlo-BoldItalic;\f4\fnil\fcharset0 Menlo-Bold;\f5\fnil\fcharset0 Menlo-Italic;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red26\green26\blue26;
\red255\green255\blue255;\red82\green0\blue103;\red15\green112\blue3;\red0\green0\blue109;\red109\green109\blue109;
\red15\green112\blue3;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c100000;\cssrgb\c13333\c13333\c13333;
\cssrgb\c100000\c100000\c100000;\csgenericrgb\c32157\c0\c40392;\csgenericrgb\c5882\c43922\c1176;\csgenericrgb\c0\c0\c42745;\csgenericrgb\c42745\c42745\c42745;
\csgenericrgb\c5882\c43922\c1176;}
\margl1440\margr1440\vieww15660\viewh11420\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 DEVELOPER GUIDE:\
\

\b Use Cases
\b0  (see User_Document.rtf)\
\

\b Design:
\b0 \
\
Two Classes: LatencyChecker2, ExecutorWrapper\
Property File: Single application.properties file included\
\
We create a uber jar that bundles all the dependent jars (and default application.properties)\
\
We should override the property file as such (using Maven shade plugin):\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 \CocoaLigature0 java -cp uber-java-dse-latency-checker2-1.0-SNAPSHOT.jar -DPROP_FILE=/Users/subratadasgupta/GitHub/java-dse-latency-checker2/app2.properties com.datastax.dse.demo.ExecutorsWrapper
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 Timing calculation assumptions:\ulnone \
\
I consider the following:\
\
\pard\pardeftab720\sl300\partightenfactor0

\f2\fs25\fsmilli12800 \cf4 \cb5 \expnd0\expndtw0\kerning0
Using multiple threads in parallel, each thread doing a insert in dc1 and same thread reading from dc2.\
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \cb5 Additional Delay = Total_Latency - (Read_Latency+Write_Latency)\
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\b \cf4 \cb5 \ul \ulc4 Definitions:
\b0 \ulnone \
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\i \cf4 \cb5 Total_Latency:
\i0 \'a0Time between when a data record is being inserted to time when it is read into client program.\
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\i \cf4 \cb5 Read_Latency
\i0 : Time spent in executing select statement until data is read into client program.\
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\i \cf4 \cb5 Write_Latency
\i0 : Time spent in executing insert statement until data is acknowledged as written by coordinator.\
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\i \cf4 \cb5 Additional_Delay
\i0 : Difference in time as explained above.\'a0\
\
\pard\pardeftab720\sl300\partightenfactor0

\b \cf4 \ul Output Format:
\b0 \ulnone \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 System.
\f3\i\b \cf6 out
\f1\i0\b0 \cf0 .printf(
\f4\b \cf7 "%d,%s,%.3f,%.3f,%.3f,%3f\cf8 \\n\cf7 "
\f1\b0 \cf0 , iteration, threadName, 
\f4\b \cf6 avgWriteLatency
\f1\b0 \cf0 ,\
    
\f4\b \cf6 avgReadLatency
\f1\b0 \cf0 , 
\f4\b \cf6 avgTotalLatency
\f1\b0 \cf0 , (
\f4\b \cf6 avgTotalLatency 
\f1\b0 \cf0 - 
\f4\b \cf6 avgWriteLatency 
\f1\b0 \cf0 - 
\f4\b \cf6 avgReadLatency
\f1\b0 \cf0 ));\
\pard\pardeftab720\sl300\partightenfactor0

\f2\fs25\fsmilli12800 \cf4 \cb5 \expnd0\expndtw0\kerning0
\
\ul Where:\ulnone \
Iteration -> Specific Task number out of \'93numTasks\'94\
threadName -> Thread.currentThread().getName()\
\'93Avg\'94\{Write,Read,Total\}\'94Latency: As defined above but averaged over \'93numRecords\'94. (Typically numRecords should be 1)\
Last Item: is \'93Additional_Delay\'94  (see above)\
\
\

\b \ul Sample output (Local laptop):
\b0 \ulnone \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 subratadasgupta$ java -cp uber-java-dse-latency-checker2-1.0-SNAPSHOT.jar -DPROP_FILE=/Users/subratadasgupta/GitHub/java-dse-latency-checker2/app_local.properties com.datastax.dse.demo.ExecutorsWrapper
\f2\fs25\fsmilli12800 \cf4 \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1 \

\f1\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 \'85\
Creating Executor Service with a thread pool of Size:10\
Submitting the tasks for execution...\
Executing Task #0: pool-1-thread-1\
Executing Task #1: pool-1-thread-2\
Executing Task #2: pool-1-thread-3\
Executing Task #3: pool-1-thread-4\
Executing Task #4: pool-1-thread-5\
Executing Task #5: pool-1-thread-6\
Executing Task #6: pool-1-thread-7\
Executing Task #8: pool-1-thread-9\
Executing Task #7: pool-1-thread-8\
Executing Task #9: pool-1-thread-10\
3,pool-1-thread-4,11.286,4.337,15.625,0.002548\
6,pool-1-thread-7,11.827,4.332,16.161,0.001985\
9,pool-1-thread-10,11.928,4.324,16.255,0.002212\
1,pool-1-thread-2,11.648,4.323,15.973,0.001775\
2,pool-1-thread-3,11.802,4.375,16.179,0.002197\
5,pool-1-thread-6,11.398,4.322,15.728,0.007815\
8,pool-1-thread-9,11.082,4.173,15.364,0.109430\
0,pool-1-thread-1,11.295,4.173,15.718,0.249737\
7,pool-1-thread-8,11.559,4.299,15.860,0.002261\
4,pool-1-thread-5,11.069,4.247,15.499,0.182269\
Shutdown...
\f2\fs25\fsmilli12800 \cf4 \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \
\

\b \ul Sample output (AWS):
\b0 \ulnone \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 sdasgupta-MBP15:target subratadasgupta$ java -cp uber-java-dse-latency-checker2-1.0-SNAPSHOT.jar -DPROP_FILE=/Users/subratadasgupta/GitHub/java-dse-latency-checker2/app_aws.properties com.datastax.dse.demo.ExecutorsWrapper\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\
\'85\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
Creating Executor Service with a thread pool of Size:10\
Submitting the tasks for execution...\
Executing Task #0: pool-1-thread-1\
Executing Task #1: pool-1-thread-2\
Executing Task #2: pool-1-thread-3\
Executing Task #3: pool-1-thread-4\
Executing Task #4: pool-1-thread-5\
Executing Task #5: pool-1-thread-6\
Executing Task #7: pool-1-thread-8\
Executing Task #6: pool-1-thread-7\
Executing Task #8: pool-1-thread-9\
Executing Task #9: pool-1-thread-10\
Need to iterate again until data arrives...\
Need to iterate again until data arrives...\
3,pool-1-thread-4,33.559,89.290,122.852,0.002459\
0,pool-1-thread-1,32.748,91.089,124.046,0.209197\
Need to iterate again until data arrives...\
8,pool-1-thread-9,33.223,89.435,122.661,0.002559\
9,pool-1-thread-10,33.467,89.195,122.665,0.002556\
2,pool-1-thread-3,32.926,91.936,125.124,0.262382\
6,pool-1-thread-7,33.211,91.674,124.887,0.002441\
5,pool-1-thread-6,32.750,94.072,127.066,0.243943\
4,pool-1-thread-5,33.064,175.793,208.859,0.002374\
7,pool-1-thread-8,33.317,176.130,209.450,0.003584\
1,pool-1-thread-2,33.403,176.422,209.827,0.001623\
Shutdown...\
\pard\pardeftab720\sl300\partightenfactor0

\f2\fs25\fsmilli12800 \cf4 \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1 \

\b \ul Sample Property file:
\b0 \ulnone \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f5\i\fs24 \cf9 \cb1 \kerning1\expnd0\expndtw0 # List of comma-separated IP addresses of hosts in each DC\
#CONTACT_POINTS_DC1 = 127.0.0.1,localhost\
#CONTACT_POINTS_DC2 = 127.0.0.1\
# DC #1 configs (laptop testing)\
#dc1_name = Red\
# DC #2 configs (laptop testing)\
#dc2_name = Red\
\
# US West (AWS)\

\f4\i0\b \cf8 CONTACT_POINTS_DC1 
\f1\b0 \cf0 = 
\f4\b \cf7 13.57.248.149,13.57.30.120\

\f5\i\b0 \cf9 #US East (AWS)\

\f4\i0\b \cf8 CONTACT_POINTS_DC2 
\f1\b0 \cf0 = 
\f4\b \cf7 54.210.34.153,54.85.173.63\
\
\cf8 dc1_name 
\f1\b0 \cf0 = 
\f4\b \cf7 us-westdc2\
\cf8 dc2_name 
\f1\b0 \cf0 = 
\f4\b \cf7 us-eastdc1\
\
\cf8 PORT 
\f1\b0 \cf0 = 
\f4\b \cf7 9042\
\
\cf8 CONSISTENCY 
\f1\b0 \cf0 = 
\f4\b \cf7 LOCAL_QUORUM\
\

\f5\i\b0 \cf9 #Number of concurrent Threads or Tasks executed in parallel. Must be defined.\

\f4\i0\b \cf8 numTasks 
\f1\b0 \cf0 = 
\f4\b \cf7 10\
\

\f5\i\b0 \cf9 # Number of records to write (and then read) per Thread/Task. This number should be left at 1.\
# Left for future testing if we want to combine batches of sequential writes/reads with parallel Threads\

\f4\i0\b \cf8 numRecords 
\f1\b0 \cf0 = 
\f4\b \cf7 1\
\

\f5\i\b0 \cf9 # Keyspace definiton (The schema should use NetworkTopologyStrategy and RF=3 for Production testing)\
# For Laptop\
#keyspace = CREATE KEYSPACE IF NOT EXISTS latency_check WITH replication = \{'class':'SimpleStrategy', 'replication_factor':1\};\
# For a Cluster (Eg: AWS)\

\f4\i0\b \cf8 keyspace 
\f1\b0 \cf0 = 
\f4\b \cf7 CREATE KEYSPACE IF NOT EXISTS latency_check WITH replication = \{'class':'NetworkTopologyStrategy', 'us-eastdc1':3, 'us-westdc2':3\};\
\
\

\f5\i\b0 \cf9 # Table DDL\

\f4\i0\b \cf8 createTable 
\f1\b0 \cf0 = 
\f4\b \cf7 CREATE TABLE IF NOT EXISTS latency_check.kvp (id uuid PRIMARY KEY,nanosec bigint);\
\

\f5\i\b0 \cf9 #Insert Statement\

\f4\i0\b \cf8 insertStatement 
\f1\b0 \cf0 = 
\f4\b \cf7 INSERT INTO latency_check.kvp (id, nanosec) VALUES (?, ?) USING TTL 3600\
\

\f5\i\b0 \cf9 #Select Statement\

\f4\i0\b \cf8 selectStatement 
\f1\b0 \cf0 = 
\f4\b \cf7 SELECT nanosec FROM latency_check.kvp where id=?\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf10 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\b0\fs25\fsmilli12800 \cf4 \cb5 \expnd0\expndtw0\kerning0
\
\
-- END\'97}